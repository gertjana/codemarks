name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --all-features

  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: codemarks-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: codemarks-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: codemarks-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: codemarks-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: runner.os != 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/codemarks ${{ matrix.artifact-name }}
        chmod +x ${{ matrix.artifact-name }}

    - name: Prepare artifact (Windows)
      if: runner.os == 'Windows'
      run: |
        cp target/${{ matrix.target }}/release/codemarks.exe ${{ matrix.artifact-name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}

    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.artifact-name }}
        asset_name: ${{ matrix.artifact-name }}
        asset_content_type: application/octet-stream

  scan-project:
    name: Scan Project with Released Binary
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
    - uses: actions/checkout@v4

    - name: Download Linux binary
      uses: actions/download-artifact@v3
      with:
        name: codemarks-linux-x86_64
        path: .

    - name: Make binary executable
      run: chmod +x codemarks-linux-x86_64

    - name: Scan project for codemarks
      run: ./codemarks-linux-x86_64 ci --ignore "README.md" --ignore "*.md"
